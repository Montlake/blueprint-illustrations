brooklyn.catalog:
  version: "0.1"

  description: |
    App-specific specializations of generic entities.

  items:
  - id: app-load-balancer
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.proxy.nginx.NginxController
      name: My Load Balancer (nginx)
      brooklyn.config:
        # Expects to be run in an app with an entity whose id is cluster.
        loadbalancer.serverpool: $brooklyn:entity("cluster")
        nginx.sticky: false

  - id: app-database
    itemType: entity
    item:
      type: 'mariadb-node:0.1'
      name: MariaDB
      brooklyn.config:
        mariadb.datastore.creation.script.url: https://raw.githubusercontent.com/cloudsoft/todo-mvc/master/server/db-creation-script.sql
        # These values are set in db-creation-script.sql. With a little work they could also
        # be injected into the creation script.
        db.user: brooklyn
        db.password: br00k11n # would normally come from an external config provider.
        db.name: todo # the database is literally 'todo'

  # A single instance of the Node.js application. Expects to obtain database connection
  # values from another entity with id 'db'.
  - id: app-web-member
    itemType: entity
    item:
      type: 'nodejs-node:0.1'
      name: NodeJS
      brooklyn.config:
        metrics.port: 8091
        nodejs.gitRepo.url: https://github.com/cloudsoft/todo-mvc.git
        nodejs.app.fileName: app.js
        nodejs.app.name: Todo App
        shell.env:
          METRICS_PORT: $brooklyn:config("metrics.port")
          DB_HOST: $brooklyn:entity("db").attributeWhenReady("host.subnet.address")
          DB_PORT: $brooklyn:entity("db").attributeWhenReady("port")
          DB_USER: $brooklyn:entity("db").config("db.user")
          DB_PASSWORD: $brooklyn:entity("db").config("db.password")
          DB_NAME: $brooklyn:entity("db").config("db.name")

      brooklyn.policies:
      - type: org.apache.brooklyn.policy.ha.ServiceRestarter
        brooklyn.config:
          failOnRecurringFailuresInThisDuration: 5m

      brooklyn.enrichers:
      # Publishes the address of the metrics endpoint as a sensor named metrics.uri.
      - type: org.apache.brooklyn.enricher.stock.Transformer
        brooklyn.config:
          enricher.targetSensor: metrics.uri
          enricher.triggerSensors:
          - host.address
          - metrics.port
          enricher.targetValue:
            $brooklyn:formatString:
            - "http://%s:%s/metrics"
            - $brooklyn:attributeWhenReady("host.address")
            - $brooklyn:config("metrics.port")
      - type: org.apache.brooklyn.policy.ha.ServiceFailureDetector
        brooklyn.config:
          entityFailed.stabilizationDelay: 30s

      brooklyn.initializers:
      # Note: metric values are only published after the first request.
      # HttpRequestSensor repeatedly logs errors to the info log until that point.
      - type: org.apache.brooklyn.core.sensor.http.HttpRequestSensor
        brooklyn.config:
          uri: $brooklyn:attributeWhenReady("metrics.uri")
          jsonPath: $.method.post.rate.m1
          name: nodejs.metrics.create
          period: 5s
          targetType: java.lang.Double
      - type: org.apache.brooklyn.core.sensor.http.HttpRequestSensor
        brooklyn.config:
          uri: $brooklyn:attributeWhenReady("metrics.uri")
          jsonPath: $.method.get.rate.m1
          name: nodejs.metrics.read
          period: 5s
          targetType: java.lang.Double
      - type: org.apache.brooklyn.core.sensor.http.HttpRequestSensor
        brooklyn.config:
          uri: $brooklyn:attributeWhenReady("metrics.uri")
          jsonPath: $.method.put.rate.m1
          name: nodejs.metrics.update
          period: 5s
          targetType: java.lang.Double
      - type: org.apache.brooklyn.core.sensor.http.HttpRequestSensor
        brooklyn.config:
          uri: $brooklyn:attributeWhenReady("metrics.uri")
          jsonPath: $.method.delete.rate.m1
          name: nodejs.metrics.delete
          period: 5s
          targetType: java.lang.Double

